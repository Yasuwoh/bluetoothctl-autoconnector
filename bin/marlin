#!/bin/bash

# The origin of the command name is "blue fast animal"
# It stands for the command to operate bluetoothctl quickly
#
# https://onekindplanet.org/top-10/top-10-worlds-fastest-animals/


PROGNAME=$(basename $0)

INTERVAL_AFTER_SELECT=1
INTERVAL_AFTER_POWER_ON=3

INTERVAL_AFTER_PAIRED_DEVICES=2
INTERVAL_AFTER_SCAN_ON=5
INTERVAL_AFTER_PAIR=5
INTERVAL_AFTER_YES=5
INTERVAL_AFTER_TRUST=2
INTERVAL_AFTER_SCAN_OFF=2
INTERVAL_AFTER_CONNECT=3

INTERVAL_AFTER_REMOVE=3
INTERVAL_AFTER_ANY_OTHER_COMMAND=3


function main() {
  IFS=$'\n'

  adapters=()
  adapters_cmd=()

  while read line
  do
    adapter=$(echo $line | sed -r 's/^.*(([0-9A-F]{2}:){5}[0-9A-F]{2}).*$/\1/')
    adapters=(${adapters[@]} "$adapter")
    adapters_cmd=(${adapters_cmd[@]} "select $adapter\n\npaired-devices\n\n")
  done <<< "$(bluetoothctl -- list)"

  if [[ "${argv[0]}" = "all" ]] && [[ "${argv[1]}" = "" ]]; then
    argv=( $(list | sed -r "s/([0-9A-F]{2}:){5}[0-9A-F]{2} //g" | sed -r "s/ /\\\ /g") )
  fi

  if [[ "$subcommand" = "" ]] || [[ "$subcommand" = "list" ]]; then
    if [[ "${argv[0]}" = "" ]]; then
      list
    elif [[ "${argv[0]}" = "diff" ]]; then
      if type colordiff 1>/dev/null 2>/dev/null; then
        colordiff -u <(alias) <(list) | grep -Ev -e "---.*$" -e "\+\+\+.*$" -e "@@.*$"
      else
        diff -u <(alias) <(list) | grep -Ev -e "---.*$" -e "\+\+\+.*$" -e "@@.*$"
      fi
    else
      echo "Unknown command: ${argv[0]}" >&2
      exit 1
    fi
  elif [[ "$subcommand" = "alias" ]]; then
    if [[ "${argv[0]}" = "" ]]; then
      alias
    elif [[ "${argv[0]}" = "edit" ]]; then
      $EDITOR ~/.marlin_aliases
    else
      echo "Unknown command: ${argv[0]}" >&2
      exit 1
    fi
  elif [[ "$subcommand" = "register" ]]; then
    if [[ "${argv[0]}" = "" ]]; then
      echo "Device is missing" >&2
      exit 1
    fi

    while [[ "${argv[0]}" != "" ]]; do
      register
      argv=( "${argv[@]:1}" )
      echo
    done
  else
    if [[ "${argv[0]}" = "" ]]; then
      echo "Device is missing" >&2
      exit 1
    fi

    while [[ "${argv[0]}" != "" ]]; do
      operate
      argv=( "${argv[@]:1}" )
      echo
    done
  fi
}


function list() {
  paired_devices=$(echo -e ${adapters_cmd[@]} | bluetoothctl | grep "Device " | sed -e "s/^Device //" | sort)

  if [[ "${paired_devices}" != "" ]]; then
    echo "${paired_devices}"
  else
    echo "No paired devices found" >&2
  fi
}


function alias() {
  cat ~/.marlin_aliases | awk '{ sub("#.*$", ""); print $0; }' | sed -e 's/[ \t]*$//' | sed -e '/^$/d' | sort
}


function operate() {
  target_extract=$(echo -e "${adapters_cmd[@]}" | bluetoothctl | grep -E "^Device " -B 2 | grep -i -E "^Device ([0-9A-F]{2}:){5}[0-9A-F]{2} ${argv[0]}" -B 2)

  if [[ "${target_extract}" = "" ]]; then
    echo "No such device registered: ${argv[0]}" >&2
    echo
    echo "The following command might help you" >&2
    echo "$PROGNAME register ${argv[0]}" >&2
    exit 2
  fi

  device=$(echo "${target_extract}" | grep "Device " | awk '{print $2}')
  adapter=$(echo "${target_extract}" | grep -oE -e "Controller ([0-9A-F]{2}:){5}[0-9A-F]{2}" -e "select ([0-9A-F]{2}:){5}[0-9A-F]{2}" | awk '{print $2}')

  if [[ "$subcommand" = "info" ]] || [[ "$subcommand" = "status" ]]; then
    echo -e "select ${adapter}\n\ninfo ${device}\n\n" | bluetoothctl | grep -e "Name: " -e "Paired: " -e "Trusted: " -e "Blocked: " -e "Connected: " | sed "s/^[ \t]*//"
  elif [[ "$subcommand" = "remove" ]] || [[ "$subcommand" = "delete" ]]; then
    {
      printf "select ${adapter}\n\n"
      sleep $INTERVAL_AFTER_SELECT
      printf "power on\n\n"
      sleep $INTERVAL_AFTER_POWER_ON
      printf "paired-devices\n\n"
      sleep $INTERVAL_AFTER_PAIRED_DEVICES

      while [[ "$(paired_devices)" != "" ]]
      do
        printf "remove ${device}\n\n"
        sleep $INTERVAL_AFTER_REMOVE
      done

      printf "exit\n\n"
    } | bluetoothctl
  else
    {
      printf "select ${adapter}\n\n"
      sleep $INTERVAL_AFTER_SELECT
      printf "power on\n\n"
      sleep $INTERVAL_AFTER_POWER_ON
      printf "$subcommand ${device}\n\n"
      sleep $INTERVAL_AFTER_ANY_OTHER_COMMAND
      printf "exit\n\n"
    } | bluetoothctl
  fi
}


function register() {
  if [ ! -e ~/.marlin_aliases ]; then
    touch ~/.marlin_aliases
  fi

  device_hit_count=$(cat ~/.marlin_aliases | grep -c -i "${argv[0]}")

  if [[ "$device_hit_count" -eq 0 ]]; then
    echo -e "No such device: ${argv[0]}\n" >&2
    echo "Hint: use ~/.marlin_aliases like this" >&2
    echo "echo \"<YOUR_DEVICE_BD_ADDRESS> <YOUR_DEVICE_NAME>\" >> ~/.marlin_aliases" >&2
    exit 2
  elif [[ "$device_hit_count" -ge 2 ]]; then
    echo "Too many devices hit by word \"${argv[0]}\"" >&2
    exit 2
  fi

  not_paired_adapter=""
  while read line
  do
    adapter=$(echo $line | sed -r 's/^.*(([0-9A-F]{2}:){5}[0-9A-F]{2}).*$/\1/')

    not_paired_adapter=$(paired_devices)
    if [[ "$not_paired_adapter" = "" ]]; then
      not_paired_adapter=$adapter
      break
    fi
  done <<< "$(bluetoothctl -- list)"

  if [[ "$not_paired_adapter" = "" ]]; then
    echo "No free adapters found" >&2
    exit 2
  fi

  device=$(cat ~/.marlin_aliases | grep -i "${argv[0]}" | grep -o -E "([0-9A-F]{2}:){5}[0-9A-F]{2}")

  {
    printf "select $not_paired_adapter\n\n"
    sleep $INTERVAL_AFTER_SELECT
    printf "power on\n\n"
    sleep $INTERVAL_AFTER_POWER_ON
    printf "paired-devices\n\n"
    sleep $INTERVAL_AFTER_PAIRED_DEVICES
    printf "scan on\n\n"
    sleep $INTERVAL_AFTER_SCAN_ON

    while [[ "$(paired_devices)" = "" ]]
    do
      printf "pair $device\n\n"
      sleep $INTERVAL_AFTER_PAIR
      printf "yes\n\n"
      sleep $INTERVAL_AFTER_YES
    done

    printf "trust $device\n\n"
    sleep $INTERVAL_AFTER_TRUST
    printf "scan off\n\n"
    sleep $INTERVAL_AFTER_SCAN_OFF
    printf "connect $device\n\n"
    sleep $INTERVAL_AFTER_CONNECT
    printf "exit\n\n"
  } | bluetoothctl
}


function paired_devices() {
  {
    printf "select $adapter\n\n"
    printf "paired-devices\n\n"
  } | bluetoothctl | grep "Device " | sed -r 's/^.*(([0-9A-F]{2}:){5}[0-9A-F]{2}).*$/\1/'
}


function usage() {
  echo -e "Usage: $PROGNAME -h|--help"
  printf  "       %${#PROGNAME}s [list]\n"
  printf  "       %${#PROGNAME}s list [diff]\n"
  printf  "       %${#PROGNAME}s alias [edit]\n"
  printf  "       %${#PROGNAME}s info|status|register|BLUETOOTHCTL_COMMAND DEVICE_NAME|DEVICE_BD_ADDRESS\n"
  echo
  echo
  echo -e "Description:"
  echo -e "	Operate command \"bluetoothctl\" very easily and quickly"
  echo
  echo
  echo -e "Arguments:"
  echo -e "	[list]"
  echo -e "		Show all devices paired with all adapters"
  echo -e "		This operation is same without arguments"
  echo
  echo -e "	list diff"
  echo -e "		Show diff between all paired devices and device address aliases"
  echo
  echo -e "	alias"
  echo -e "		Show aliases written in ~/.marlin_aliases"
  echo -e "		This file should be written in the form of \"<DEVICE_BD_ADDRESS> <DEVICE_NAME>\""
  echo -e "		You can use \"<DEVICE_NAME>\" written in this file as a device BD address alias"
  echo
  echo -e "	alias edit"
  echo -e "		Edit ~/.marlin_aliases with your environment's default editor"
  echo
  echo -e "	info|status DEVICE_NAME|DEVICE_BD_ADDRESS"
  echo -e "		Show specified device's information"
  echo
  echo -e "	register DEVICE_NAME|DEVICE_BD_ADDRESS"
  echo -e "		Pair, trust, and connect a specified device"
  echo -e "		It attempts to pair the device forever unless it is not paired"
  echo
  echo -e "	BLUETOOTHCTL_COMMAND DEVICE_NAME|DEVICE_BD_ADDRESS"
  echo -e "		Operate any bluetoothctl command to a specified device"
  echo -e "		e.g. \"$PROGNAME connect macbook\""
  echo -e "		     \"$PROGNAME disconnect macbook\""
  echo -e "		     \"$PROGNAME remove macbook\""
  echo
  echo
  echo -e "Tips:"
  echo -e "	\"DEVICE_NAME\" doesn't have to be exactly matched"
  echo -e "	For example, if \"DEVICE_NAME\" is \"MacBook Pro\", \"macbook\" is also valid"
  echo -e "	unless it doesn't be duplicated with any other device BD address aliases"
  echo
  echo
  echo -e "Options:"
  echo -e "	-h, --help"
  echo -e "		Show this help message and exit"
}


for opt in "$@"
do
  case "$opt" in
    '-h' | '--help' )
      usage
      exit 0
    ;;
    '--' | '-' )
      shift 1
      param+=( "$@" )
      break
    ;;
    -* )
      echo "$PROGNAME: illegal option -- '$(echo $1 | sed 's/^-*//')'" 1>&2
      exit 1
    ;;
    * )
      if [[ ! -z "$1" ]] && [[ ! "$1" =~ ^-+ ]]; then
        argv+=( "$1" )
        shift 1

      fi
    ;;
  esac

done

subcommand=${argv[0]}
argv=( "${argv[@]:1}" )

main
